#include "ext.h"
#include "date.h"

/*
 *
 * Currently basing this on extended type support for ruby(See R.1) where our Date()
 * object is mapped to ext type 2 (Date) in msgpack-ruby.
 *
 * References:
 *   (R.1) https://github.com/ramonmaruko/msgpack-ruby/tree/extended_type_support
 *
 */
void v8_to_msgpack_ext(Handle<Value> v8obj, msgpack_object *mo, msgpack_zone *mz, int8_t type) {
    mo->type         = MSGPACK_OBJECT_EXT;
    mo->via.ext.type = type;
    mo->via.ext.size = static_cast<uint32_t>(DecodeBytes(v8obj, UTF8));
    mo->via.ext.data = (char*) msgpack_zone_malloc(mz, mo->via.ext.size);

    DecodeWrite((char*) mo->via.ext.data, mo->via.ext.size, v8obj, UTF8);
}

void v8_to_msgpack_date(Handle<Value> v8obj, msgpack_object *mo, msgpack_zone *mz, int8_t type) {
    Handle<Date> date = Handle<Date>::Cast(v8obj);

    int64_t sec            = _simple_date_get(date, "getTime")->IntegerValue() / 1000;
    uint32_t nsec          = _simple_date_get(date, "getMilliseconds")->Uint32Value() * 1000000;
    int32_t utc_offset_i32 = -_simple_date_get(date, "getTimezoneOffset")->Int32Value();
    uint8_t isdst          = _is_dst(date);

    mo->type         = MSGPACK_OBJECT_EXT;
    mo->via.ext.type = type;

    msgpack_packer_write_date(mo, mz, sec, nsec, (int16_t)utc_offset_i32, isdst);
}
