'use strict';
/*global describe: false, it: false, before: false, beforeEach: false, after: false, afterEach: false */

var assert = require('assert');
var util   = require('util');

exports.shouldBehaveLikeANodeJSAsyncFunction = function () {
  describe('callback was passed', function () {
    it('calls the callback', function (done) {
      this.funcUnderTest.apply(this, this.validArguments.concat([done]));
    });

    it('passes the result to the callback', function (done) {
      var that = this;

      function callback(err, data) {
        if (err) { done(err); }

        assert.deepEqual(data, that.expectedResult);
        done();
      }

      this.funcUnderTest.apply(this, this.validArguments.concat([callback]));
    });

    it('defers the calling of the callback', function (done) {
      var result = '';

      function checkResult() {
        assert.equal(result, '12', 'Callback called prematurely');
        done();
      }

      function callback() {
        result = result + '2';
        checkResult();
      }

      this.funcUnderTest.apply(this, this.invalidArguments.concat(callback));
      result = result + '1';
    });

    describe('error thrown', function () {
      it('passes the error the callback as the first argument', function (done) {
        function callback(err) {
          assert(util.isError(err), 'Error not passed');
          done();
        }

        this.funcUnderTest.apply(this, this.invalidArguments.concat([callback]));
      });

      it('passes undefined to the callback as the second argument', function (done) {
        function callback(err, data) {
          assert.deepEqual(data, undefined);
          done();
        }

        this.funcUnderTest.apply(this, this.invalidArguments.concat(callback));
      });
    });
  });
};
