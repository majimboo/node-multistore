'use strict';

var assert  = require('assert');
var msgpack = require('msgpack');
var util    = require('util');
var purr    = require('../../');

describe('DateTime::unpack', function() {
  it('returns a Date object', function(done) {
    var date   = new purr.DateTime(1397554144485); // Tue Apr 15 2014 00:00:00 GMT+0800 (PHT)
    var packed = purr.pack(date);

    var unpacked = purr.unpack(packed);
    var isDate   = util.isDate(unpacked);

    assert.ok(isDate, 'unpacked object is not a Date instance');
    done();
  });

  it('returns the Date representation for the given data', function(done) {
    var date   = new purr.DateTime(1397554144485); // Tue Apr 15 2014 00:00:00 GMT+0800 (PHT)
    var packed = purr.pack(date);

    var unpacked = purr.unpack(packed);

    var ms1 = date.getTime();
    var ms2 = unpacked.getTime();

    assert.deepEqual(ms1, ms2);

    done();
  });

  it('should be the same date', function(done) {
    var date1 = new purr.DateTime(1397554144485); // Tue Apr 15 2014 17:29:04 GMT+0800 (PHT)
    var date2 = purr.unpack(purr.pack(date1));

    var s1 = date1.toISOString();
    var s2 = date2.toISOString();

    assert.deepEqual(s1, s2);
    done();
  });

  it('should return ext type 3', function(done) {
    var date     = new purr.DateTime(1397554144485); // Tue Apr 15 2014 17:29:04 GMT+0800 (PHT)
    var packed   = purr.pack(date);
    var unpacked = purr.unpack(packed);

    assert.ok(unpacked.type === 3, 'expecting unpacked object to be type 3');

    done();
  });

  it('should expect precise nanoseconds', function(done) {
    var date = new purr.DateTime(1398352969457); // Thu Apr 24 2014 23:22:49 GMT+0800 (PHT)
    date.setNanoseconds(457481943);

    var packed   = purr.pack(date);
    var unpacked = purr.unpack(packed);

    assert.deepEqual(unpacked.getNanoseconds(), 457481943);

    done();
  });
});
