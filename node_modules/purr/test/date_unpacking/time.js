'use strict';
/*global describe: false, it: false, before: false, beforeEach: false, after: false, afterEach: false */

var assert  = require('assert');
var msgpack = require('msgpack');
var util    = require('util');
var purr    = require('../../');

describe('Time::unpack', function () {
  it('returns a Date object', function (done) {
    var date   = new purr.Time(1397554144485); // Tue Apr 15 2014 00:00:00 GMT+0800 (PHT)
    var packed = purr.pack(date);

    var unpacked = purr.unpack(packed);
    var isDate   = util.isDate(unpacked);

    assert.ok(isDate, 'unpacked object is not a Date instance');
    done();
  });

  it('returns the Date representation for the given data', function (done) {
    var date   = new purr.Time(1397554144485); // Tue Apr 15 2014 00:00:00 GMT+0800 (PHT)
    var packed = purr.pack(date);

    var unpacked = purr.unpack(packed);

    var ms1 = date.getTime();
    var ms2 = unpacked.getTime();

    assert.deepEqual(ms1, ms2);

    done();
  });

  it('should be the same date', function (done) {
    var date1 = new purr.Time(1397554144485); // Tue Apr 15 2014 17:29:04 GMT+0800 (PHT)
    var date2 = purr.unpack(purr.pack(date1));

    var s1 = date1.toISOString();
    var s2 = date2.toISOString();

    assert.deepEqual(s1, s2);
    done();
  });

  it('should return ext type -2', function (done) {
    var date     = new purr.Time(1397554144485); // Tue Apr 15 2014 17:29:04 GMT+0800 (PHT)
    var packed   = purr.pack(date);
    var unpacked = purr.unpack(packed);

    assert.ok(unpacked.type === -2, 'expecting unpacked object to be type -2');

    done();
  });

  it('should expect precise nanoseconds', function (done) {
    var date = new purr.DateTime(1398352969457); // Thu Apr 24 2014 23:22:49 GMT+0800 (PHT)
    date.setNanoseconds(457481943);

    var packed   = purr.pack(date);
    var unpacked = purr.unpack(packed);

    assert.deepEqual(unpacked.getNanoseconds(), 457481943);

    done();
  });

  describe('4456438002614ms since epoch', function () {
    it('should unpack it properly', function () {
      var expected = new Date(4456438002614);
      var unpacked = purr.unpack(purr.pack(expected));

      assert.deepEqual(expected, new Date(unpacked.getTime()));
    });
  });

  describe('ranges', function () {
    var ranges = {
      '-(1 << 7) seconds': -127000,
      '-(1 << 15) seconds': -32768000,
      '-(1 << 23) seconds': -8388608000,
      '-(1 << 31) seconds': -2147483648000,
      '-(1 << 39) seconds': -549755813888000,
      '(1 << 7) - 1 seconds': 127000,
      '(1 << 15) - 1 seconds': 32767000,
      '(1 << 23) - 1 seconds': 8388607000,
      '(1 << 31) - 1 seconds': 2147483647000,
      '(1 << 39) - 1 seconds': 549755813887000
    };

    Object.keys(ranges).forEach(function (range) {
      describe(range, function () {
        it('should unpack it properly', function () {
          var expected = new Date(ranges[range]);
          var unpacked = purr.unpack(purr.pack(expected));

          assert.deepEqual(expected, new Date(unpacked.getTime()));
        });
      });
    });
  });
});
