#include "msgpack.cc"
#include "date.cc"

void v8_to_msgpack_date(Handle<Value> v8obj, msgpack_object *mo, msgpack_zone *mz, int8_t type) {
  Handle<Date> date = Handle<Date>::Cast(v8obj);

  int64_t sec        = (int64_t)_simple_date_get(date, "getTime")->NumberValue() / 1000;
  uint32_t nsec;
  int16_t utc_offset = -(int16_t)_simple_date_get(date, "getTimezoneOffset")->NumberValue();
  uint8_t isdst      = _is_dst(date);

  if(date->Has(String::New("getNanoseconds"))) {
    nsec = _simple_date_get(date, "getNanoseconds")->Uint32Value();
  } else {
    nsec = _simple_date_get(date, "getMilliseconds")->Uint32Value() * 1000000;
  }

  if(date->Has(String::New("type"))) {
    Handle<Value> val = Handle<Function>::Cast(date->Get(String::New("type")));
    type = (int8_t)val->Int32Value();
  }

  mo->type         = MSGPACK_OBJECT_EXT;
  mo->via.ext.type = type;

  msgpack_packer_write_date(mo, mz, sec, nsec, utc_offset, isdst);
}

NODE_MODULE(purrPacker, init);
